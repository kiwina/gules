name: Build

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Target platform (leave empty for all)'
        required: false
        type: choice
        options:
          - all
          - linux-x86_64
          - linux-aarch64
          - windows-x86_64
          - macos-x86_64
          - macos-aarch64
        default: 'all'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: gules
            asset_name: gules-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: gules
            asset_name: gules-linux-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: gules.exe
            asset_name: gules-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: gules
            asset_name: gules-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: gules
            asset_name: gules-macos-aarch64

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo dpkg --add-architecture arm64
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu libssl-dev:arm64 pkg-config

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Build (with MCP feature)
      run: cargo build --release --target ${{ matrix.target }} --features mcp
      env:
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        PKG_CONFIG_ALLOW_CROSS: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '1' || '' }}
        OPENSSL_DIR: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '/usr' || '' }}
        OPENSSL_LIB_DIR: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '/usr/lib/aarch64-linux-gnu' || '' }}
        OPENSSL_INCLUDE_DIR: ${{ matrix.target == 'aarch64-unknown-linux-gnu' && '/usr/include' || '' }}

    - name: Run tests
      if: matrix.target == 'x86_64-unknown-linux-gnu' || matrix.target == 'x86_64-pc-windows-msvc' || matrix.target == 'x86_64-apple-darwin'
      run: cargo test --release --target ${{ matrix.target }} --features mcp

    - name: Strip binary (Linux/macOS)
      if: runner.os != 'Windows'
      run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
        if-no-files-found: error

  build-summary:
    name: Build Summary
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Summary
      run: |
        echo "âœ… All platform builds completed successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Built Artifacts:" >> $GITHUB_STEP_SUMMARY
        echo "- Linux x86_64" >> $GITHUB_STEP_SUMMARY
        echo "- Linux ARM64" >> $GITHUB_STEP_SUMMARY
        echo "- Windows x86_64" >> $GITHUB_STEP_SUMMARY
        echo "- macOS x86_64 (Intel)" >> $GITHUB_STEP_SUMMARY
        echo "- macOS ARM64 (Apple Silicon)" >> $GITHUB_STEP_SUMMARY
