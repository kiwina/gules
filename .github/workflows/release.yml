name: Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string
      create_tag:
        description: 'Create git tag if it does not exist'
        required: false
        type: boolean
        default: true

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
      is_prerelease: ${{ steps.check_prerelease.outputs.is_prerelease }}
    steps:
    - name: Get version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Check if prerelease
      id: check_prerelease
      run: |
        if [[ "${{ steps.get_version.outputs.version }}" == *"alpha"* ]] || [[ "${{ steps.get_version.outputs.version }}" == *"beta"* ]]; then
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.get_version.outputs.version }}
        body: |
          ## gules ${{ steps.get_version.outputs.version }}
          
          ### Downloads
          
          Choose the binary for your platform:
          
          - **Linux x86_64**: `gules-linux-x86_64`
          - **Linux ARM64**: `gules-linux-aarch64`
          - **Windows x86_64**: `gules-windows-x86_64.exe`
          - **macOS Intel**: `gules-macos-x86_64`
          - **macOS Apple Silicon**: `gules-macos-aarch64`
          
          ### Installation
          
          ```bash
          # Linux/macOS
          chmod +x gules-*
          sudo mv gules-* /usr/local/bin/gules
          
          # Windows
          # Move gules-windows-x86_64.exe to a directory in your PATH
          ```
          
          ### Configuration
          
          Create `~/.config/gules/config.toml`:
          
          ```toml
          api_key = "your-jules-api-key"
          api_url = "https://jules.googleapis.com/v1alpha"
          ```
          
          Get your API key from: https://jules.google.com/settings
          
          ### Documentation
          
          - [README](https://github.com/kiwina/gules/blob/main/README.md)
          - [Commands Reference](https://github.com/kiwina/gules/blob/main/docs/COMMANDS.md)
          - [MCP Integration Guide](https://github.com/kiwina/gules/blob/main/docs/MCP.md)
          
          ---
          
          **Full Changelog**: https://github.com/kiwina/gules/compare/...v${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: ${{ steps.check_prerelease.outputs.is_prerelease }}

  build-release:
    name: Build Release - ${{ matrix.os }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: gules
            asset_name: gules-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: gules
            asset_name: gules-linux-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: gules.exe
            asset_name: gules-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: gules
            asset_name: gules-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: gules
            asset_name: gules-macos-aarch64

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }} --features mcp
      env:
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

    - name: Strip binary (Linux/macOS)
      if: runner.os != 'Windows'
      run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

    - name: Create archive (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        cd target/${{ matrix.target }}/release
        tar czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
        mv ${{ matrix.asset_name }}.tar.gz ../../..

    - name: Create archive (Windows)
      if: runner.os == 'Windows'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
        move ${{ matrix.asset_name }}.zip ../../..

    - name: Upload release asset (Linux/macOS)
      if: runner.os != 'Windows'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.asset_name }}.tar.gz
        asset_name: ${{ matrix.asset_name }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload release asset (Windows)
      if: runner.os == 'Windows'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.asset_name }}.zip
        asset_name: ${{ matrix.asset_name }}.zip
        asset_content_type: application/zip

    - name: Upload raw binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: application/octet-stream

  publish-summary:
    name: Publish Summary
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    steps:
    - name: Summary
      run: |
        echo "ðŸŽ‰ Release v${{ needs.create-release.outputs.version }} published!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Release Details:" >> $GITHUB_STEP_SUMMARY
        echo "- Version: \`${{ needs.create-release.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- Prerelease: \`${{ needs.create-release.outputs.is_prerelease }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- Platforms: Linux (x64, ARM64), Windows (x64), macOS (Intel, Apple Silicon)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Verify downloads work correctly" >> $GITHUB_STEP_SUMMARY
        echo "2. Update documentation if needed" >> $GITHUB_STEP_SUMMARY
        echo "3. Announce the release ðŸ“£" >> $GITHUB_STEP_SUMMARY
